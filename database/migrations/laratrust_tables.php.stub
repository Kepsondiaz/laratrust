<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::disableForeignKeyConstraints();

        $tables = Config::get('laratrust.tables');
        $foreignKeys = Config::get('laratrust.foreign_keys');

        // Roles' table
        Schema::create($tables['roles'], function (Blueprint $table) {
            $table->id();
            $table->string('name', 64)->unique()->index();
            $table->string('display_name', 64)->nullable();
            $table->string('description')->nullable();
            $table->timestamps();
        });

        // Permissions' table
        Schema::create($tables['permissions'], function (Blueprint $table) {
            $table->id();
            $table->string('name', 64)->unique()->index();
            $table->string('display_name', 64)->nullable();
            $table->string('description')->nullable();
            $table->timestamps();
        });

        // Table for associating roles to users (Many To Many Polymorphic)
        Schema::create($tables['role_user'], function (Blueprint $table) use ($foreignKeys) {
            $table->foreignId($foreignKeys['role'])->constrained();
            $table->foreignId($foreignKeys['user']);
            $table->string('user_type');

            $table->primary([$foreignKeys['role'], $foreignKeys['user'], 'user_type']);
        });

        // Table for associating permissions to users (Many To Many Polymorphic)
        Schema::create($tables['permission_user'], function (Blueprint $table) use ($foreignKeys) {
            $table->foreignId($foreignKeys['permission'])->constrained();
            $table->foreignId($foreignKeys['user']);
            $table->string('user_type');

            $table->primary([$foreignKeys['permission'], $foreignKeys['user'], 'user_type']);
        });

        // Table for associating permissions to roles (Many-to-Many)
        Schema::create($tables['permission_role'], function (Blueprint $table) use ($foreignKeys) {
            $table->foreignId($foreignKeys['permission'])->constrained();
            $table->foreignId($foreignKeys['role'])->constrained();

            $table->primary([$foreignKeys['permission'], $foreignKeys['role']]);
        });

        Schema::enableForeignKeyConstraints();
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        $tables = Config::get('laratrust.tables');

        Schema::dropIfExists($tables['roles']);
        Schema::dropIfExists($tables['permissions']);
        Schema::dropIfExists($tables['role_user']);
        Schema::dropIfExists($tables['permission_user']);
        Schema::dropIfExists($tables['permission_role']);
    }
};
